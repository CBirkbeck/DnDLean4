msgid ""
msgstr "Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Wed Jul 17 14:41:32 2024\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: en\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "level completed! ðŸŽ‰"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warningsâ€¦ ðŸŽ­"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! ðŸŽ‰"
msgstr ""

#: Game.Levels.DemoWorld.tuto1
msgid "Tutorial World 1"
msgstr ""

#: Game.Levels.DemoWorld.tuto1
msgid "# Logical statements\n"
"\n"
"In Logic, a *statement* is a sentence that is either true of false, for example:\n"
"\n"
"```\n"
"1. The sum of two odd numbers is an even number\n"
"2. 36 is divisible by 3\n"
"3. x > 2\n"
"```\n"
"\n"
"\n"
"One of the goals of this game is to show you how to work with logical statements on a computer,\n"
"specifically using a computer language called Lean. In Lean, logical staments live in a\n"
"place called `Prop` (which is short for Propositions). For example, if we write  `P : Prop`\n"
"we mean `P` is a logical statement.  Think of the `:` symbol as saying `P` lives in `Prop`\n"
"(in Maths this would be denoted by `P âˆˆ Prop`, to mean `P` is an element of `Prop`).\n"
"\n"
"# Truth Values\n"
"\n"
"The *truth value* of a logical statement (i.e. some `P : Prop` is whether the statement is true or\n"
"false). For example, the truth value of the statement: For all integers $$x âˆˆ â„¤$$, $$0 â‰¤ x^2$$\n"
"is *true*, while For all integers $$x âˆˆ â„¤$$, $$0 â‰¤ x^3$$ is *false*.\n"
"\n"
"In Lean we assign truth values as follows: We first think of a proposition $P$ as a set with\n"
"*at most* one element. If this set is empty, then we say `P` is *false*. Otherwise, if this set has\n"
"an element, lets call it `p`, then this statement is *true* and `p` is the proof. We will usually\n"
"use upper case letters for logical statements, and lower case for their proofs.\n"
"\n"
"To recap, we write `P : Prop` to mean `P` is a\n"
"proposition and we write  `p : P`  to mean `p` is a\n"
"proof of `P`.\n"
"\n"
"The aim of this game is to learn how to prove logical statements, which we call *lemmas* through a\n"
"series of manipulations which we call *tactics*.\n"
"\n"
"Lets start with a simple example of how a lemma looks like in Lean.\n"
"\n"
"This is where the window on the right will come into play. If you delete the *sorry* below,\n"
"on the right you will see the following state:\n"
"\n"
"```\n"
"P : Prop\n"
"p : P\n"
"âŠ¢ P\n"
"```\n"
"\n"
"Here, the first two lines are our assumptions, where the first line `P : Prop` says $P$ is a\n"
"logical statement and the second line `p : P` says `p` is the proof of `P`.\n"
"\n"
"The thing after the `âŠ¢` symbol is what we need to prove to win the level (i.e. prove the lemma).\n"
"\n"
"In this game our moves or, as we call them in Lean, *tactics*, are what will allow us to\n"
"manipulate our statements and produce proofs.\n"
"\n"
"The first tactic we will use is called *exact*. It is used when you need to prove a\n"
"statement $P$ and you have the proof of it. In the example above we have `p : P` and we need to\n"
"prove `P`, then typing `exact p`  will prove it.\n"
"\n"
"**Note:  We end each line with a comma `,` to tell Lean that this is the end of our move.**\n"
"\n"
"Try it for yourself now and see what happens!"
msgstr ""

#: Game.Levels.DemoWorld.tuto1
msgid "write exact p"
msgstr ""

#: Game.Levels.DemoWorld.tuto1
msgid "Yay!"
msgstr ""

#: Game.Levels.DemoWorld.tuto1
msgid "## Summary\n"
"If the goal is `âŠ¢ P` then `exact p,` will close the goal if\n"
"and only if `p` is a proof of `P` (i.e. `p : P`)\n"
"## Details\n"
"Say $P$, $Q$ and $R$ are logical staments\n"
"and your lemma looks like this:\n"
"```\n"
"p : P,\n"
"h : P â†’ Q,\n"
"j : Q â†’ R\n"
"âŠ¢ R\n"
"```\n"
"Then you can solve the level by using `exact j(h(p))`"
msgstr ""

#: Game.Levels.DemoWorld.tuto2
msgid "Tutorial World 2"
msgstr ""

#: Game.Levels.DemoWorld.tuto2
msgid "test"
msgstr ""

#: Game.Levels.DemoWorld.tuto2
msgid "\"If $P,Q$ are logical statements with respective proofs $p,q$, then $Q$ is true. \""
msgstr ""

#: Game.Levels.DemoWorld.tuto2
msgid ""
msgstr ""

#: Game.Levels.DemoWorld.tuto3
msgid "Combining logical statements"
msgstr ""

#: Game.Levels.DemoWorld.tuto3
msgid "#Combining logical statements\n"
"\n"
"We can combine basic statements to create new ones. For example, we can write `Â¬P` for the\n"
"statement Not `P` and if we have two statements `P Q : Prop`\n"
"we can write `P â†’ Q` to mean `P` implies `Q`.\n"
"\n"
"Say we have the following state of our lemma:\n"
"\n"
"```\n"
"P Q : Prop\n"
"h : P â†’ Q\n"
"p : P\n"
"âŠ¢ Q\n"
"```\n"
"As in level one, the first line says `P` and `Q` are logical statements and the third line says\n"
"that `P` has a proof `p`.\n"
"\n"
"In the second line we have the implication `P â†’ Q`,\n"
"which we have called `h`. We think of `h`  as a one-way road from the statement `P` to the\n"
"statement `Q` in `Prop`. In Maths, we would call `h` a function or a map.\n"
"\n"
"Finally, our goal is to prove `Q` is true.\n"
"\n"
"Using `exact h p`will prove our lemma.\n"
"\n"
"Why does this work? We know that `P` is true, since we have a proof of it `p` and `h` tells us that\n"
"if `P` is true then `Q` is true. So combining `h` and `p` results in a proof of `Q`.\n"
"\n"
"**Note: We use `h p` rather than `h P`, because we want to transform the proof of `P` into\n"
"a proof of `Q`.**"
msgstr ""

#: Game.Levels.DemoWorld.tuto3
msgid "Let $P,Q$ be logical statements and $P$ implies $Q$. If $P$ is true, then so is $Q$."
msgstr ""

#: Game.Levels.DemoWorld.tuto3
msgid ""
msgstr ""

#: Game.Levels.DemoWorld.tuto4
msgid "Combining logical statements 2"
msgstr ""

#: Game.Levels.DemoWorld.tuto4
msgid "Now try this!"
msgstr ""

#: Game.Levels.DemoWorld.tuto4
msgid "Let $P,Q,R$ be logical statements with $P$ implies $Q$ and $Q$ implies $R$. If $P$ is true, then so\n"
"is $R$."
msgstr ""

#: Game.Levels.DemoWorld.tuto4
msgid "You've now finished the tutorial! You can now play the game."
msgstr ""

#: Game.Levels.DemoWorld
msgid "Tutorial World"
msgstr ""

#: Game.Levels.DemoWorld
msgid "Let's learn to play the game first!"
msgstr ""

#: Game.Levels.LogicalStatements.logic0
msgid "Apply tactic"
msgstr ""

#: Game.Levels.LogicalStatements.logic0
msgid "## The `apply` tactic\n"
"\n"
"If your lemma has the following state:\n"
"\n"
"```\n"
"h : P â†’ Q\n"
"âŠ¢ Q\n"
"```\n"
"\n"
"Here, we assume that `P` implies `Q` and our goal is to prove `Q`. Then the tactic `apply h`\n"
"will change our goal to `P` and leave our assumptions unchanged, i.e. your new state will be\n"
"\n"
"```\n"
"h : P â†’ Q\n"
"âŠ¢ P\n"
"```\n"
"\n"
"The `apply` tactic is useful for *arguing backwards*. It reduces the goal to a potentially easier\n"
"goal, without changing any hypotheses.\n"
"\n"
"Here's an example we have already done, but try and do it using the `apply` tactic:"
msgstr ""

#: Game.Levels.LogicalStatements.logic0
msgid "Yay!"
msgstr ""

#: Game.Levels.LogicalStatements.logic0
msgid "## The `apply` tactic\n"
"\n"
"If your lemma looks like\n"
"\n"
"```\n"
"h : P â†’ Q\n"
"âŠ¢ Q\n"
"```\n"
"\n"
"then the tactic `apply h,` will change it to\n"
"\n"
"```\n"
"h : P â†’ Q\n"
"âŠ¢ P\n"
"```\n"
"\n"
"The `apply` tactic is useful for *arguing backwards*. It reduces the goal to a potentially easier\n"
"goal, without changing any hypotheses."
msgstr ""

#: Game.Levels.LogicalStatements
msgid "Logical Statements"
msgstr ""

#: Game.Levels.LogicalStatements
msgid "Lets learn some logic!"
msgstr ""

#: Game
msgid "Dungeons and De Morgan's: The logic Game"
msgstr ""

#: Game
msgid "## By Chris Birkbeck and Niki Kalaydzhieva\n"
"\n"
"Go on a Mathemagical quest to learn some logic!\n"
"\n"
"# What is this game?\n"
"\n"
"This is a game to teach you some mathematical logic using Lean.\n"
"\n"
"Have fun!"
msgstr ""

#: Game
msgid ""
msgstr ""

#: Game
msgid "Game Template"
msgstr ""

#: Game
msgid "You should use this game as a template for your own game and add your own levels."
msgstr ""
