msgid ""
msgstr "Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Wed Jul 17 16:26:28 2024\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: en\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "level completed! ðŸŽ‰"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warningsâ€¦ ðŸŽ­"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! ðŸŽ‰"
msgstr ""

#: Game.Levels.DemoWorld.tuto1
msgid "Tutorial World 1"
msgstr ""

#: Game.Levels.DemoWorld.tuto1
msgid "# Logical statements\n"
"\n"
"In Logic, a *statement* is a sentence that is either true of false, for example:\n"
"\n"
"```\n"
"1. The sum of two odd numbers is an even number\n"
"2. 36 is divisible by 3\n"
"3. x > 2\n"
"```\n"
"\n"
"\n"
"One of the goals of this game is to show you how to work with logical statements on a computer,\n"
"specifically using a computer language called Lean. In Lean, logical staments live in a\n"
"place called `Prop` (which is short for Propositions). For example, if we write  `P : Prop`\n"
"we mean `P` is a logical statement.  Think of the `:` symbol as saying `P` lives in `Prop`\n"
"(in Maths this would be denoted by `P âˆˆ Prop`, to mean `P` is an element of `Prop`).\n"
"\n"
"# Truth Values\n"
"\n"
"The *truth value* of a logical statement (i.e. some `P : Prop` is whether the statement is true or\n"
"false). For example, the truth value of the statement: For all integers $$x âˆˆ â„¤$$, $$0 â‰¤ x^2$$\n"
"is *true*, while For all integers $$x âˆˆ â„¤$$, $$0 â‰¤ x^3$$ is *false*.\n"
"\n"
"In Lean we assign truth values as follows: We first think of a proposition $P$ as a set with\n"
"*at most* one element. If this set is empty, then we say `P` is *false*. Otherwise, if this set has\n"
"an element, lets call it `p`, then this statement is *true* and `p` is the proof. We will usually\n"
"use upper case letters for logical statements, and lower case for their proofs.\n"
"\n"
"To recap, we write `P : Prop` to mean `P` is a\n"
"proposition and we write  `p : P`  to mean `p` is a\n"
"proof of `P`.\n"
"\n"
"The aim of this game is to learn how to prove logical statements, which we call *lemmas* through a\n"
"series of manipulations which we call *tactics*.\n"
"\n"
"Lets start with a simple example of how a lemma looks like in Lean.\n"
"\n"
"This is where the window on the right will come into play. If you delete the *sorry* below,\n"
"on the right you will see the following state:\n"
"\n"
"```\n"
"P : Prop\n"
"p : P\n"
"âŠ¢ P\n"
"```\n"
"\n"
"Here, the first two lines are our assumptions, where the first line `P : Prop` says $P$ is a\n"
"logical statement and the second line `p : P` says `p` is the proof of `P`.\n"
"\n"
"The thing after the `âŠ¢` symbol is what we need to prove to win the level (i.e. prove the lemma).\n"
"\n"
"In this game our moves or, as we call them in Lean, *tactics*, are what will allow us to\n"
"manipulate our statements and produce proofs.\n"
"\n"
"The first tactic we will use is called *exact*. It is used when you need to prove a\n"
"statement $P$ and you have the proof of it. In the example above we have `p : P` and we need to\n"
"prove `P`, then typing `exact p`  will prove it.\n"
"\n"
"**Note:  We end each line with a comma `,` to tell Lean that this is the end of our move.**\n"
"\n"
"Try it for yourself now and see what happens!"
msgstr ""

#: Game.Levels.DemoWorld.tuto1
msgid "write exact p"
msgstr ""

#: Game.Levels.DemoWorld.tuto1
msgid "Yay!"
msgstr ""

#: Game.Levels.DemoWorld.tuto1
msgid "## Summary\n"
"If the goal is `âŠ¢ P` then `exact p,` will close the goal if\n"
"and only if `p` is a proof of `P` (i.e. `p : P`)\n"
"## Details\n"
"Say $P$, $Q$ and $R$ are logical staments\n"
"and your lemma looks like this:\n"
"```\n"
"p : P,\n"
"h : P â†’ Q,\n"
"j : Q â†’ R\n"
"âŠ¢ R\n"
"```\n"
"Then you can solve the level by using `exact j(h(p))`"
msgstr ""

#: Game.Levels.DemoWorld.tuto2
msgid "Tutorial World 2"
msgstr ""

#: Game.Levels.DemoWorld.tuto2
msgid "test"
msgstr ""

#: Game.Levels.DemoWorld.tuto2
msgid "\"If $P,Q$ are logical statements with respective proofs $p,q$, then $Q$ is true. \""
msgstr ""

#: Game.Levels.DemoWorld.tuto2
msgid ""
msgstr ""

#: Game.Levels.DemoWorld.tuto3
msgid "Combining logical statements"
msgstr ""

#: Game.Levels.DemoWorld.tuto3
msgid "#Combining logical statements\n"
"\n"
"We can combine basic statements to create new ones. For example, we can write `Â¬P` for the\n"
"statement Not `P` and if we have two statements `P Q : Prop`\n"
"we can write `P â†’ Q` to mean `P` implies `Q`.\n"
"\n"
"Say we have the following state of our lemma:\n"
"\n"
"```\n"
"P Q : Prop\n"
"h : P â†’ Q\n"
"p : P\n"
"âŠ¢ Q\n"
"```\n"
"As in level one, the first line says `P` and `Q` are logical statements and the third line says\n"
"that `P` has a proof `p`.\n"
"\n"
"In the second line we have the implication `P â†’ Q`,\n"
"which we have called `h`. We think of `h`  as a one-way road from the statement `P` to the\n"
"statement `Q` in `Prop`. In Maths, we would call `h` a function or a map.\n"
"\n"
"Finally, our goal is to prove `Q` is true.\n"
"\n"
"Using `exact h p`will prove our lemma.\n"
"\n"
"Why does this work? We know that `P` is true, since we have a proof of it `p` and `h` tells us that\n"
"if `P` is true then `Q` is true. So combining `h` and `p` results in a proof of `Q`.\n"
"\n"
"**Note: We use `h p` rather than `h P`, because we want to transform the proof of `P` into\n"
"a proof of `Q`.**"
msgstr ""

#: Game.Levels.DemoWorld.tuto3
msgid "Let $P,Q$ be logical statements and $P$ implies $Q$. If $P$ is true, then so is $Q$."
msgstr ""

#: Game.Levels.DemoWorld.tuto3
msgid ""
msgstr ""

#: Game.Levels.DemoWorld.tuto4
msgid "Combining logical statements 2"
msgstr ""

#: Game.Levels.DemoWorld.tuto4
msgid "Now try this!"
msgstr ""

#: Game.Levels.DemoWorld.tuto4
msgid "Let $P,Q,R$ be logical statements with $P$ implies $Q$ and $Q$ implies $R$. If $P$ is true, then so\n"
"is $R$."
msgstr ""

#: Game.Levels.DemoWorld.tuto4
msgid "You've now finished the tutorial! You can now play the game."
msgstr ""

#: Game.Levels.DemoWorld
msgid "Tutorial World"
msgstr ""

#: Game.Levels.DemoWorld
msgid "Let's learn to play the game first!"
msgstr ""

#: Game.Levels.LogicalStatements.logic1
msgid "Apply tactic"
msgstr ""

#: Game.Levels.LogicalStatements.logic1
msgid "## The `apply` tactic\n"
"\n"
"If your lemma has the following state:\n"
"\n"
"```\n"
"h : P â†’ Q\n"
"âŠ¢ Q\n"
"```\n"
"\n"
"Here, we assume that `P` implies `Q` and our goal is to prove `Q`. Then the tactic `apply h`\n"
"will change our goal to `P` and leave our assumptions unchanged, i.e. your new state will be\n"
"\n"
"```\n"
"h : P â†’ Q\n"
"âŠ¢ P\n"
"```\n"
"\n"
"The `apply` tactic is useful for *arguing backwards*. It reduces the goal to a potentially easier\n"
"goal, without changing any hypotheses.\n"
"\n"
"Here's an example we have already done, but try and do it using the `apply` tactic:"
msgstr ""

#: Game.Levels.LogicalStatements.logic1
msgid "Let $P,Q$ be logical statements and $P$ implies $Q$. If $P$ is true, then so is $Q$."
msgstr ""

#: Game.Levels.LogicalStatements.logic1
msgid "Yay!"
msgstr ""

#: Game.Levels.LogicalStatements.logic1
msgid "## The `apply` tactic\n"
"\n"
"If your lemma looks like\n"
"\n"
"```\n"
"h : P â†’ Q\n"
"âŠ¢ Q\n"
"```\n"
"\n"
"then the tactic `apply h,` will change it to\n"
"\n"
"```\n"
"h : P â†’ Q\n"
"âŠ¢ P\n"
"```\n"
"\n"
"The `apply` tactic is useful for *arguing backwards*. It reduces the goal to a potentially easier\n"
"goal, without changing any hypotheses."
msgstr ""

#: Game.Levels.LogicalStatements.logic2
msgid "intro tactic"
msgstr ""

#: Game.Levels.LogicalStatements.logic2
msgid "## The `intro` tactic.\n"
"\n"
"If your goal is\n"
"\n"
"```\n"
"âŠ¢ P â†’ Q\n"
"```\n"
"\n"
"meaning we need to prove the `P` implies `Q` then the tactic `intro hp`\n"
"will take `P` as true with proof `hp` and add `hp : P` to the assumptions. In addition,\n"
"it turn your goal into `âŠ¢ Q`.\n"
"\n"
"In other words the state of the lemma becomes:\n"
"\n"
"```\n"
"hp : P\n"
"âŠ¢ Q\n"
"```\n"
"\n"
"Lets look at an example that needs the `intro` tactic:"
msgstr ""

#: Game.Levels.LogicalStatements.logic2
msgid "If $P$ is a logical statement then $P\\implies P$."
msgstr ""

#: Game.Levels.LogicalStatements.logic2
msgid "Yay!"
msgstr ""

#: Game.Levels.LogicalStatements.logic2
msgid "## The `intro` tactic.\n"
"If your goal is to prove the implication\n"
"\n"
"```\n"
"âŠ¢ P â†’ Q\n"
"```\n"
"\n"
"then the tactic\n"
"\n"
"`intro hP,`\n"
"\n"
"will add `hp : P` as an assumption (i.e. `hp` is the proof of `P`) and turn your goal into `âŠ¢ Q`.\n"
"In other words we get:\n"
"\n"
"```\n"
"hP : P\n"
"âŠ¢ Q\n"
"```\n"
"\n"
"Tip : `intro` can also be used to introduce\n"
"more than one assumption at once. Don't forget\n"
"to name your hypotheses, e.g. `intros hP hQ` if your goal is `P â†’ Q â†’ R`."
msgstr ""

#: Game.Levels.LogicalStatements.logic3
msgid "Logical statements 3"
msgstr ""

#: Game.Levels.LogicalStatements.logic3
msgid ""
msgstr ""

#: Game.Levels.LogicalStatements.logic3
msgid "Let $P,Q$ be logical statement and assume $Q$ is true, then $P$ implies $Q$."
msgstr ""

#: Game.Levels.LogicalStatements.logic3
msgid "Why is this true?\n"
"This works because the implication `P â†’ Q` is true unless `Q` is false and `P` is true. In this case\n"
"we are given that `Q` is always true, so the implication holds regardless of the truth value of `P`."
msgstr ""

#: Game.Levels.LogicalStatements.logic4
msgid "Logical statements 4"
msgstr ""

#: Game.Levels.LogicalStatements.logic4
msgid ""
msgstr ""

#: Game.Levels.LogicalStatements.logic4
msgid "If $P,Q$ are logical statements, then $P$ implies $(Q \\implies P)$."
msgstr ""

#: Game.Levels.LogicalStatements.logic4
msgid "# Caution\n"
"\n"
"Note that implies `â†’` is not associative: in general `P â†’ (Q â†’ R)` and `(P â†’ Q) â†’ R`\n"
"might not be equivalent. This is like subtraction on numbers -- in general\n"
"`a - (b - c)` and `(a - b) - c` might not be equal.\n"
"So if we write `P â†’ Q â†’ R` then we'd better know what this means.\n"
"The convention in Lean is that it means `P â†’ (Q â†’ R)`. If you think\n"
"about it, this means that to deduce `R` you will need to prove both `P`\n"
"and `Q`."
msgstr ""

#: Game.Levels.LogicalStatements.logic5
msgid "Logical statements 5"
msgstr ""

#: Game.Levels.LogicalStatements.logic5
msgid "If we know `P`, and we also know `P â†’ Q`, we can deduce `Q`.\n"
"This is called `Modus Ponens` by logicians."
msgstr ""

#: Game.Levels.LogicalStatements.logic5
msgid "If $P$ is true and $P \\implies Q$ is true, then $Q$ is true."
msgstr ""

#: Game.Levels.LogicalStatements.logic5
msgid ""
msgstr ""

#: Game.Levels.LogicalStatements.logic6
msgid "Logical statements 6"
msgstr ""

#: Game.Levels.LogicalStatements.logic6
msgid "The goal for this level is to show that implications are transitive.\n"
"That is, if `P â†’ Q` and `Q â†’ R` are true, then so is `P â†’ R`."
msgstr ""

#: Game.Levels.LogicalStatements.logic6
msgid "If $P,Q,R$ are logical statements and $P \\implies Q$ and $Q \\implies R$ then $P \\implies R$."
msgstr ""

#: Game.Levels.LogicalStatements.logic6
msgid "It might be useful to start by using `intro hPQ hQR hP`."
msgstr ""

#: Game.Levels.LogicalStatements.logic6
msgid ""
msgstr ""

#: Game.Levels.LogicalStatements.logic7
msgid "Boss level"
msgstr ""

#: Game.Levels.LogicalStatements.logic7
msgid ""
msgstr ""

#: Game.Levels.LogicalStatements.logic7
msgid "If $P,Q,R$ are logical statements and\n"
" $(P \\implies Q \\implies R)$  then $((P \\implies Q) \\implies (P \\implies R)$."
msgstr ""

#: Game.Levels.LogicalStatements.logic7
msgid "Notice we have three implications, so we need to introduce all of them using `intro`."
msgstr ""

#: Game.Levels.LogicalStatements.logic7
msgid "When using `apply` we need to make sure that we use an assumption that contains our goal."
msgstr ""

#: Game.Levels.LogicalStatements.logic7
msgid "If we have more than one goal to prove, then we need to do them in order. By default the lean\n"
"applies the tactics to the first goal until complete and then moves on to the next."
msgstr ""

#: Game.Levels.LogicalStatements.logic7
msgid ""
msgstr ""

#: Game.Levels.LogicalStatements
msgid "Logic"
msgstr ""

#: Game.Levels.LogicalStatements
msgid "Lets learn some logic!"
msgstr ""

#: Game.Levels.TrueAndFalse.tf1
msgid "rfl tactic"
msgstr ""

#: Game.Levels.TrueAndFalse.tf1
msgid "##  True and False\n"
"\n"
" `Prop` has two special inhabitants, the logical statements `true`,\n"
"with truth value true and `false` with truth value\n"
"false.\n"
"\n"
"\n"
"In the following levels we will work with logical statements combining `true` and `false`.\n"
"\n"
"To help us we need to introduce a new tactic:\n"
"\n"
"## The `rfl` tactic\n"
"\n"
"If your lemma has the goal:\n"
"\n"
"```\n"
"âŠ¢ true\n"
"```\n"
"\n"
"then `rfl` will complete the proof for you. Try it out below:"
msgstr ""

#: Game.Levels.TrueAndFalse.tf1
msgid "Yay!"
msgstr ""

#: Game.Levels.TrueAndFalse.tf1
msgid "## The `rfl` tactic\n"
"The `rfl` tactic can do many things, one of which is the following:\n"
"\n"
"If your lemma has the goal:\n"
"\n"
"```\n"
"âŠ¢ true\n"
"```\n"
"\n"
"then `rfl` will complete the proof for you."
msgstr ""

#: Game.Levels.TrueAndFalse.tf2
msgid "true implies true"
msgstr ""

#: Game.Levels.TrueAndFalse.tf2
msgid ""
msgstr ""

#: Game.Levels.TrueAndFalse.tf2
msgid ""
msgstr ""

#: Game.Levels.TrueAndFalse.tf3
msgid "flase implies true"
msgstr ""

#: Game.Levels.TrueAndFalse.tf3
msgid ""
msgstr ""

#: Game.Levels.TrueAndFalse.tf3
msgid ""
msgstr ""

#: Game.Levels.TrueAndFalse.tf4
msgid "flase implies false"
msgstr ""

#: Game.Levels.TrueAndFalse.tf4
msgid ""
msgstr ""

#: Game.Levels.TrueAndFalse.tf4
msgid ""
msgstr ""

#: Game.Levels.TrueAndFalse.tf5
msgid "true implies false implies false"
msgstr ""

#: Game.Levels.TrueAndFalse.tf5
msgid ""
msgstr ""

#: Game.Levels.TrueAndFalse.tf5
msgid ""
msgstr ""

#: Game.Levels.TrueAndFalse
msgid "True and False"
msgstr ""

#: Game.Levels.TrueAndFalse
msgid "Lets learn about trus and false!"
msgstr ""

#: Game
msgid "Dungeons and De Morgan's: The logic Game"
msgstr ""

#: Game
msgid "## By Chris Birkbeck and Niki Kalaydzhieva\n"
"\n"
"Go on a Mathemagical quest to learn some logic!\n"
"\n"
"# What is this game?\n"
"\n"
"This is a game to teach you some mathematical logic using Lean.\n"
"\n"
"Have fun!"
msgstr ""

#: Game
msgid ""
msgstr ""

#: Game
msgid "Game Template"
msgstr ""

#: Game
msgid "You should use this game as a template for your own game and add your own levels."
msgstr ""
