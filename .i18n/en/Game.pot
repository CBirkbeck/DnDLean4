msgid ""
msgstr "Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Wed Jul 17 19:13:41 2024\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: en\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "level completed! 🎉"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warnings… 🎭"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! 🎉"
msgstr ""

#: Game.Levels.DemoWorld.tuto1
msgid "Tutorial World 1"
msgstr ""

#: Game.Levels.DemoWorld.tuto1
msgid "# Logical statements\n"
"\n"
"In Logic, a *statement* is a sentence that is either true of false, for example:\n"
"\n"
"```\n"
"1. The sum of two odd numbers is an even number\n"
"2. 36 is divisible by 3\n"
"3. x > 2\n"
"```\n"
"\n"
"\n"
"One of the goals of this game is to show you how to work with logical statements on a computer,\n"
"specifically using a computer language called Lean. In Lean, logical staments live in a\n"
"place called `Prop` (which is short for Propositions). For example, if we write  `P : Prop`\n"
"we mean `P` is a logical statement.  Think of the `:` symbol as saying `P` lives in `Prop`\n"
"(in Maths this would be denoted by `P ∈ Prop`, to mean `P` is an element of `Prop`).\n"
"\n"
"# Truth Values\n"
"\n"
"The *truth value* of a logical statement (i.e. some `P : Prop` is whether the statement is true or\n"
"false). For example, the truth value of the statement: For all integers $$x ∈ ℤ$$, $$0 ≤ x^2$$\n"
"is *true*, while For all integers $$x ∈ ℤ$$, $$0 ≤ x^3$$ is *false*.\n"
"\n"
"In Lean we assign truth values as follows: We first think of a proposition $P$ as a set with\n"
"*at most* one element. If this set is empty, then we say `P` is *false*. Otherwise, if this set has\n"
"an element, lets call it `p`, then this statement is *true* and `p` is the proof. We will usually\n"
"use upper case letters for logical statements, and lower case for their proofs.\n"
"\n"
"To recap, we write `P : Prop` to mean `P` is a\n"
"proposition and we write  `p : P`  to mean `p` is a\n"
"proof of `P`.\n"
"\n"
"The aim of this game is to learn how to prove logical statements, which we call *lemmas* through a\n"
"series of manipulations which we call *tactics*.\n"
"\n"
"Lets start with a simple example of how a lemma looks like in Lean.\n"
"\n"
"This is where the window on the right will come into play. If you delete the *sorry* below,\n"
"on the right you will see the following state:\n"
"\n"
"```\n"
"P : Prop\n"
"p : P\n"
"⊢ P\n"
"```\n"
"\n"
"Here, the first two lines are our assumptions, where the first line `P : Prop` says $P$ is a\n"
"logical statement and the second line `p : P` says `p` is the proof of `P`.\n"
"\n"
"The thing after the `⊢` symbol is what we need to prove to win the level (i.e. prove the lemma).\n"
"\n"
"In this game our moves or, as we call them in Lean, *tactics*, are what will allow us to\n"
"manipulate our statements and produce proofs.\n"
"\n"
"The first tactic we will use is called *exact*. It is used when you need to prove a\n"
"statement $P$ and you have the proof of it. In the example above we have `p : P` and we need to\n"
"prove `P`, then typing `exact p`  will prove it.\n"
"\n"
"**Note:  We end each line with a comma `,` to tell Lean that this is the end of our move.**\n"
"\n"
"Try it for yourself now and see what happens!"
msgstr ""

#: Game.Levels.DemoWorld.tuto1
msgid "write exact p"
msgstr ""

#: Game.Levels.DemoWorld.tuto1
msgid "Yay!"
msgstr ""

#: Game.Levels.DemoWorld.tuto1
msgid "## Summary\n"
"If the goal is `⊢ P` then `exact p,` will close the goal if\n"
"and only if `p` is a proof of `P` (i.e. `p : P`)\n"
"## Details\n"
"Say $P$, $Q$ and $R$ are logical staments\n"
"and your lemma looks like this:\n"
"```\n"
"p : P,\n"
"h : P → Q,\n"
"j : Q → R\n"
"⊢ R\n"
"```\n"
"Then you can solve the level by using `exact j(h(p))`"
msgstr ""

#: Game.Levels.DemoWorld.tuto2
msgid "Tutorial World 2"
msgstr ""

#: Game.Levels.DemoWorld.tuto2
msgid "test"
msgstr ""

#: Game.Levels.DemoWorld.tuto2
msgid "\"If $P,Q$ are logical statements with respective proofs $p,q$, then $Q$ is true. \""
msgstr ""

#: Game.Levels.DemoWorld.tuto2
msgid ""
msgstr ""

#: Game.Levels.DemoWorld.tuto3
msgid "Combining logical statements"
msgstr ""

#: Game.Levels.DemoWorld.tuto3
msgid "#Combining logical statements\n"
"\n"
"We can combine basic statements to create new ones. For example, we can write `¬P` for the\n"
"statement Not `P` and if we have two statements `P Q : Prop`\n"
"we can write `P → Q` to mean `P` implies `Q`.\n"
"\n"
"Say we have the following state of our lemma:\n"
"\n"
"```\n"
"P Q : Prop\n"
"h : P → Q\n"
"p : P\n"
"⊢ Q\n"
"```\n"
"As in level one, the first line says `P` and `Q` are logical statements and the third line says\n"
"that `P` has a proof `p`.\n"
"\n"
"In the second line we have the implication `P → Q`,\n"
"which we have called `h`. We think of `h`  as a one-way road from the statement `P` to the\n"
"statement `Q` in `Prop`. In Maths, we would call `h` a function or a map.\n"
"\n"
"Finally, our goal is to prove `Q` is true.\n"
"\n"
"Using `exact h p`will prove our lemma.\n"
"\n"
"Why does this work? We know that `P` is true, since we have a proof of it `p` and `h` tells us that\n"
"if `P` is true then `Q` is true. So combining `h` and `p` results in a proof of `Q`.\n"
"\n"
"**Note: We use `h p` rather than `h P`, because we want to transform the proof of `P` into\n"
"a proof of `Q`.**"
msgstr ""

#: Game.Levels.DemoWorld.tuto3
msgid "Let $P,Q$ be logical statements and $P$ implies $Q$. If $P$ is true, then so is $Q$."
msgstr ""

#: Game.Levels.DemoWorld.tuto3
msgid ""
msgstr ""

#: Game.Levels.DemoWorld.tuto4
msgid "Combining logical statements 2"
msgstr ""

#: Game.Levels.DemoWorld.tuto4
msgid "Now try this!"
msgstr ""

#: Game.Levels.DemoWorld.tuto4
msgid "Let $P,Q,R$ be logical statements with $P$ implies $Q$ and $Q$ implies $R$. If $P$ is true, then so\n"
"is $R$."
msgstr ""

#: Game.Levels.DemoWorld.tuto4
msgid "You've now finished the tutorial! You can now play the game."
msgstr ""

#: Game.Levels.DemoWorld
msgid "Tutorial World"
msgstr ""

#: Game.Levels.DemoWorld
msgid "Let's learn to play the game first!"
msgstr ""

#: Game.Levels.LogicalStatements.logic1
msgid "Apply tactic"
msgstr ""

#: Game.Levels.LogicalStatements.logic1
msgid "## The `apply` tactic\n"
"\n"
"If your lemma has the following state:\n"
"\n"
"```\n"
"h : P → Q\n"
"⊢ Q\n"
"```\n"
"\n"
"Here, we assume that `P` implies `Q` and our goal is to prove `Q`. Then the tactic `apply h`\n"
"will change our goal to `P` and leave our assumptions unchanged, i.e. your new state will be\n"
"\n"
"```\n"
"h : P → Q\n"
"⊢ P\n"
"```\n"
"\n"
"The `apply` tactic is useful for *arguing backwards*. It reduces the goal to a potentially easier\n"
"goal, without changing any hypotheses.\n"
"\n"
"Here's an example we have already done, but try and do it using the `apply` tactic:"
msgstr ""

#: Game.Levels.LogicalStatements.logic1
msgid "Let $P,Q$ be logical statements and $P$ implies $Q$. If $P$ is true, then so is $Q$."
msgstr ""

#: Game.Levels.LogicalStatements.logic1
msgid "Yay!"
msgstr ""

#: Game.Levels.LogicalStatements.logic1
msgid "## The `apply` tactic\n"
"\n"
"If your lemma looks like\n"
"\n"
"```\n"
"h : P → Q\n"
"⊢ Q\n"
"```\n"
"\n"
"then the tactic `apply h,` will change it to\n"
"\n"
"```\n"
"h : P → Q\n"
"⊢ P\n"
"```\n"
"\n"
"The `apply` tactic is useful for *arguing backwards*. It reduces the goal to a potentially easier\n"
"goal, without changing any hypotheses."
msgstr ""

#: Game.Levels.LogicalStatements.logic2
msgid "intro tactic"
msgstr ""

#: Game.Levels.LogicalStatements.logic2
msgid "## The `intro` tactic.\n"
"\n"
"If your goal is\n"
"\n"
"```\n"
"⊢ P → Q\n"
"```\n"
"\n"
"meaning we need to prove the `P` implies `Q` then the tactic `intro hp`\n"
"will take `P` as true with proof `hp` and add `hp : P` to the assumptions. In addition,\n"
"it turn your goal into `⊢ Q`.\n"
"\n"
"In other words the state of the lemma becomes:\n"
"\n"
"```\n"
"hp : P\n"
"⊢ Q\n"
"```\n"
"\n"
"Lets look at an example that needs the `intro` tactic:"
msgstr ""

#: Game.Levels.LogicalStatements.logic2
msgid "If $P$ is a logical statement then $P\\implies P$."
msgstr ""

#: Game.Levels.LogicalStatements.logic2
msgid "Yay!"
msgstr ""

#: Game.Levels.LogicalStatements.logic2
msgid "## The `intro` tactic.\n"
"If your goal is to prove the implication\n"
"\n"
"```\n"
"⊢ P → Q\n"
"```\n"
"\n"
"then the tactic\n"
"\n"
"`intro hP,`\n"
"\n"
"will add `hp : P` as an assumption (i.e. `hp` is the proof of `P`) and turn your goal into `⊢ Q`.\n"
"In other words we get:\n"
"\n"
"```\n"
"hP : P\n"
"⊢ Q\n"
"```\n"
"\n"
"Tip : `intro` can also be used to introduce\n"
"more than one assumption at once. Don't forget\n"
"to name your hypotheses, e.g. `intro hP hQ` if your goal is `P → Q → R`."
msgstr ""

#: Game.Levels.LogicalStatements.logic3
msgid "Logical statements 3"
msgstr ""

#: Game.Levels.LogicalStatements.logic3
msgid ""
msgstr ""

#: Game.Levels.LogicalStatements.logic3
msgid "Let $P,Q$ be logical statement and assume $Q$ is true, then $P$ implies $Q$."
msgstr ""

#: Game.Levels.LogicalStatements.logic3
msgid "Why is this true?\n"
"This works because the implication `P → Q` is true unless `Q` is false and `P` is true. In this case\n"
"we are given that `Q` is always true, so the implication holds regardless of the truth value of `P`."
msgstr ""

#: Game.Levels.LogicalStatements.logic4
msgid "Logical statements 4"
msgstr ""

#: Game.Levels.LogicalStatements.logic4
msgid ""
msgstr ""

#: Game.Levels.LogicalStatements.logic4
msgid "If $P,Q$ are logical statements, then $P$ implies $(Q \\implies P)$."
msgstr ""

#: Game.Levels.LogicalStatements.logic4
msgid "# Caution\n"
"\n"
"Note that implies `→` is not associative: in general `P → (Q → R)` and `(P → Q) → R`\n"
"might not be equivalent. This is like subtraction on numbers -- in general\n"
"`a - (b - c)` and `(a - b) - c` might not be equal.\n"
"So if we write `P → Q → R` then we'd better know what this means.\n"
"The convention in Lean is that it means `P → (Q → R)`. If you think\n"
"about it, this means that to deduce `R` you will need to prove both `P`\n"
"and `Q`."
msgstr ""

#: Game.Levels.LogicalStatements.logic5
msgid "Logical statements 5"
msgstr ""

#: Game.Levels.LogicalStatements.logic5
msgid "If we know `P`, and we also know `P → Q`, we can deduce `Q`.\n"
"This is called `Modus Ponens` by logicians."
msgstr ""

#: Game.Levels.LogicalStatements.logic5
msgid "If $P$ is true and $P \\implies Q$ is true, then $Q$ is true."
msgstr ""

#: Game.Levels.LogicalStatements.logic5
msgid ""
msgstr ""

#: Game.Levels.LogicalStatements.logic6
msgid "Logical statements 6"
msgstr ""

#: Game.Levels.LogicalStatements.logic6
msgid "The goal for this level is to show that implications are transitive.\n"
"That is, if `P → Q` and `Q → R` are true, then so is `P → R`."
msgstr ""

#: Game.Levels.LogicalStatements.logic6
msgid "If $P,Q,R$ are logical statements and $P \\implies Q$ and $Q \\implies R$ then $P \\implies R$."
msgstr ""

#: Game.Levels.LogicalStatements.logic6
msgid "It might be useful to start by using `intro hPQ hQR hP`."
msgstr ""

#: Game.Levels.LogicalStatements.logic6
msgid ""
msgstr ""

#: Game.Levels.LogicalStatements.logic7
msgid "Boss level"
msgstr ""

#: Game.Levels.LogicalStatements.logic7
msgid ""
msgstr ""

#: Game.Levels.LogicalStatements.logic7
msgid "If $P,Q,R$ are logical statements and\n"
" $(P \\implies Q \\implies R)$  then $((P \\implies Q) \\implies (P \\implies R)$."
msgstr ""

#: Game.Levels.LogicalStatements.logic7
msgid "Notice we have three implications, so we need to introduce all of them using `intro`."
msgstr ""

#: Game.Levels.LogicalStatements.logic7
msgid "When using `apply` we need to make sure that we use an assumption that contains our goal."
msgstr ""

#: Game.Levels.LogicalStatements.logic7
msgid "If we have more than one goal to prove, then we need to do them in order. By default the lean\n"
"applies the tactics to the first goal until complete and then moves on to the next."
msgstr ""

#: Game.Levels.LogicalStatements.logic7
msgid ""
msgstr ""

#: Game.Levels.LogicalStatements
msgid "Logic"
msgstr ""

#: Game.Levels.LogicalStatements
msgid "Lets learn some logic!"
msgstr ""

#: Game.Levels.TrueAndFalse.tf1
msgid "trivial tactic"
msgstr ""

#: Game.Levels.TrueAndFalse.tf1
msgid "##  True and False\n"
"\n"
" `Prop` has two special inhabitants, the logical statements `true`,\n"
"with truth value true and `false` with truth value\n"
"false.\n"
"\n"
"\n"
"In the following levels we will work with logical statements combining `true` and `false`.\n"
"\n"
"To help us we need to introduce a new tactic:\n"
"\n"
"## The `trivial` tactic\n"
"\n"
"If your lemma has the goal:\n"
"\n"
"```\n"
"⊢ true\n"
"```\n"
"\n"
"then `trivial` will complete the proof for you. Try it out below:"
msgstr ""

#: Game.Levels.TrueAndFalse.tf1
msgid "Yay!"
msgstr ""

#: Game.Levels.TrueAndFalse.tf1
msgid "## The `trivial` tactic\n"
"The `trivial` tactic can do many things, one of which is the following:\n"
"\n"
"If your lemma has the goal:\n"
"\n"
"```\n"
"⊢ true\n"
"```\n"
"\n"
"then `trivial` will complete the proof for you."
msgstr ""

#: Game.Levels.TrueAndFalse.tf2
msgid "true implies true"
msgstr ""

#: Game.Levels.TrueAndFalse.tf2
msgid ""
msgstr ""

#: Game.Levels.TrueAndFalse.tf2
msgid ""
msgstr ""

#: Game.Levels.TrueAndFalse.tf3
msgid "flase implies true"
msgstr ""

#: Game.Levels.TrueAndFalse.tf3
msgid ""
msgstr ""

#: Game.Levels.TrueAndFalse.tf3
msgid ""
msgstr ""

#: Game.Levels.TrueAndFalse.tf4
msgid "flase implies false"
msgstr ""

#: Game.Levels.TrueAndFalse.tf4
msgid ""
msgstr ""

#: Game.Levels.TrueAndFalse.tf4
msgid ""
msgstr ""

#: Game.Levels.TrueAndFalse.tf5
msgid "true implies false implies false"
msgstr ""

#: Game.Levels.TrueAndFalse.tf5
msgid ""
msgstr ""

#: Game.Levels.TrueAndFalse.tf5
msgid ""
msgstr ""

#: Game.Levels.TrueAndFalse
msgid "True and False"
msgstr ""

#: Game.Levels.TrueAndFalse
msgid "Lets learn about true and false!"
msgstr ""

#: Game.Levels.AndOr.constac
msgid "constructor tactic"
msgstr ""

#: Game.Levels.AndOr.constac
msgid "## The `constructor` tactic\n"
"\n"
"If your lemma has the goal:\n"
"\n"
"```\n"
"⊢ P ∧ Q\n"
"```\n"
"\n"
"then the  `constructor`  tactic will turn it\n"
"into *two* goals `⊢ P` and `⊢ Q`.\n"
"\n"
"-/\n"
"\n"
"/-Hint : Tip\n"
"It is best practice to indicate when you are working with two goals, either by using dots ·\n"
"which you get by typing `backslash` followed by `.`\n"
"brackets like this:\n"
"\n"
"```\n"
"...\n"
"constructor\n"
"· working on P\n"
"· working on Q\n"
"```"
msgstr ""

#: Game.Levels.AndOr.constac
msgid "Let $P,Q$ be logical statements and assume that they are both true, then $P ∧ Q$ is\n"
"true."
msgstr ""

#: Game.Levels.AndOr.constac
msgid ""
msgstr ""

#: Game.Levels.AndOr.constac2
msgid "constructor tactic part 2"
msgstr ""

#: Game.Levels.AndOr.constac2
msgid "`constructor` can also be used for if and only if statements. For example, if you have `⊢ P ↔ Q` and apply\n"
"`constructor`, then your goal will change from\n"
"\n"
"```\n"
"⊢ P ↔ Q\n"
"```\n"
"to two goals, `⊢ P → Q` and `⊢ Q → P`."
msgstr ""

#: Game.Levels.AndOr.constac2
msgid "Let $P$ be a logical statement, then $P$ is true if and only if $P$ is true."
msgstr ""

#: Game.Levels.AndOr.constac2
msgid ""
msgstr ""

#: Game.Levels.AndOr.constac2
msgid "## The `constructor` tactic\n"
"\n"
"If your lemma has the goal:\n"
"\n"
"```\n"
"⊢ P ∧ Q\n"
"```\n"
"\n"
"then the  `constructor`  tactic will turn it\n"
"into *two* goals `⊢ P` and `⊢ Q`.\n"
"\n"
"Moreover, if you have an iff `P ↔ Q` then splitting it will give you two goals, `P → Q`\n"
"(i.e \"`P` only if `Q`\") and `P ← Q ` (i.e \"`P` if `Q`\") to prove."
msgstr ""

#: Game.Levels.AndOr.lr
msgid "left and right"
msgstr ""

#: Game.Levels.AndOr.lr
msgid "## `left` and `right`\n"
"\n"
"If your lemma has the goal:\n"
"\n"
"```\n"
"⊢ P ∨ Q\n"
"```\n"
"\n"
"then   `left`  changes the goal to `⊢ P`.\n"
"Similarly, `right`  changes the goal to `⊢ Q`.\n"
"-/\n"
"\n"
"/-Hint : Why does this work?\n"
"The logic is that `P` implies `P ∨ Q` so it is enough to prove `P`."
msgstr ""

#: Game.Levels.AndOr.lr
msgid "Let $P,Q$ be logical statements and assume $P$ is true, then $P ∨ Q$ is true."
msgstr ""

#: Game.Levels.AndOr.lr
msgid ""
msgstr ""

#: Game.Levels.AndOr.lr
msgid "## The `left` tactic\n"
"If your lemma has the goal:\n"
"\n"
"```\n"
"⊢ P ∨ Q\n"
"```\n"
"\n"
"then   `left`  changes the goal to `⊢ P`."
msgstr ""

#: Game.Levels.AndOr.lr
msgid "## The `right` tactic\n"
"If your lemma has the goal:\n"
"\n"
"```\n"
"⊢ P ∨ Q\n"
"```\n"
"\n"
"then   `right`  changes the goal to `⊢ Q`."
msgstr ""

#: Game.Levels.AndOr.casestac
msgid "rcases tactic"
msgstr ""

#: Game.Levels.AndOr.casestac
msgid "## The `rcases` tactic\n"
"\n"
"`cases` is a very general-purpose tactic for deconstructing hypotheses.\n"
"If `h` is an assumption which somehow bundles up two pieces of information,\n"
"then  `rcases h with ⟨h1, h2⟩` (to get ⟨ or ⟩ use backslash < or backslash >)  will make the\n"
"assumption `h` vanish and will replace it with the two components which made the proof of `h` in the first place.\n"
"An example of this occurring is if you have the assumption `h : P ∧ Q` which contains a\n"
"proof of `P` and a proof of `Q`.\n"
"\n"
"\n"
"\n"
"For example, if you have an assumption\n"
"\n"
"```\n"
"h : P ∧ Q\n"
"```\n"
"\n"
"then\n"
"\n"
"`rcases h with ⟨hP hQ⟩ `\n"
"\n"
"will delete `h` and replace it with\n"
"\n"
"```\n"
"hP : P\n"
"hQ : Q\n"
"```\n"
"Try it out below."
msgstr ""

#: Game.Levels.AndOr.casestac
msgid "If $P,Q$ are logical statements and $P ∧ Q$ is true then so is $P$."
msgstr ""

#: Game.Levels.AndOr.casestac
msgid ""
msgstr ""

#: Game.Levels.AndOr.casestac
msgid "## The `rcases` tactic\n"
"if you have an assumption\n"
"\n"
"```\n"
"h : P ∧ Q\n"
"```\n"
"\n"
"then\n"
"\n"
"`rcases h with ⟨hP hQ⟩ `\n"
"\n"
"will delete `h` and replace it with\n"
"\n"
"```\n"
"hP : P\n"
"hQ : Q\n"
"```\n"
"\n"
"You can also use `rcases` when working with the `∨` (or) connective. For example, if you have\n"
"the assumption\n"
"\n"
"```\n"
"h : P ∨ Q\n"
"```\n"
"\n"
"then `rcases h with hp | hq` will convert your state into the following two states:\n"
"\n"
"```\n"
"P : Prop\n"
"hp : P\n"
"⊢ P\n"
"```\n"
"and\n"
"\n"
"```\n"
"P : Prop\n"
"hq : Q\n"
"⊢ Q\n"
"```\n"
"one where `P` is true and one where `Q` is true."
msgstr ""

#: Game.Levels.AndOr.casestac2
msgid "rcases tactic part 2"
msgstr ""

#: Game.Levels.AndOr.casestac2
msgid "You can also use `rcases` when working with the `∨` (or) connective. For example, if you have\n"
"the assumption\n"
"\n"
"```\n"
"h : P ∨ Q\n"
"```\n"
"\n"
"then `rcases h with hp | hq` will convert your state into the following two states:\n"
"\n"
"```\n"
"P : Prop\n"
"hp : P\n"
"⊢ P\n"
"```\n"
"and\n"
"\n"
"```\n"
"P : Prop\n"
"hq : Q\n"
"⊢ Q\n"
"```\n"
"one where `P` is true and one where `Q` is true.\n"
"\n"
"Try this in the lemma below."
msgstr ""

#: Game.Levels.AndOr.casestac2
msgid "If $P$ is a logical statement and $P$ or $P$ is true, then $P$ is true."
msgstr ""

#: Game.Levels.AndOr.casestac2
msgid ""
msgstr ""

#: Game.Levels.AndOr.casestac2
msgid "## The `rcases` tactic\n"
"if you have an assumption\n"
"\n"
"```\n"
"h : P ∧ Q\n"
"```\n"
"\n"
"then\n"
"\n"
"`rcases h with ⟨hP hQ⟩ `\n"
"\n"
"will delete `h` and replace it with\n"
"\n"
"```\n"
"hP : P\n"
"hQ : Q\n"
"```"
msgstr ""

#: Game.Levels.AndOr.logicalandeasy
msgid "and is commutative"
msgstr ""

#: Game.Levels.AndOr.logicalandeasy
msgid ""
msgstr ""

#: Game.Levels.AndOr.logicalandeasy
msgid "Let $P,Q$ be logical statements, then $P ∧ Q$ is true iff $Q ∧ P$ is true."
msgstr ""

#: Game.Levels.AndOr.logicalandeasy
msgid ""
msgstr ""

#: Game.Levels.AndOr.logicalandeasy2
msgid "and is commutative"
msgstr ""

#: Game.Levels.AndOr.logicalandeasy2
msgid ""
msgstr ""

#: Game.Levels.AndOr.logicalandeasy2
msgid "If $P,Q,R$ are logical statements then $P ∧ Q$ implies that\n"
"$(P \\implies R) \\implies (Q \\implies R) \\implies R$"
msgstr ""

#: Game.Levels.AndOr.logicalandeasy2
msgid ""
msgstr ""

#: Game.Levels.AndOr.logicalandeasy3
msgid "and is transitive"
msgstr ""

#: Game.Levels.AndOr.logicalandeasy3
msgid "This level will show that `∧` is *transitive*."
msgstr ""

#: Game.Levels.AndOr.logicalandeasy3
msgid "If $P,Q,R$ are logical statements, then $P ∧ Q$ and $Q ∧ R$ imples $P ∧ R$."
msgstr ""

#: Game.Levels.AndOr.logicalandeasy3
msgid ""
msgstr ""

#: Game.Levels.AndOr
msgid "And & Or"
msgstr ""

#: Game.Levels.AndOr
msgid "Lets learn about And and Or."
msgstr ""

#: Game.Levels.LogicLaws.logicalands
msgid "First absorption law"
msgstr ""

#: Game.Levels.LogicLaws.logicalands
msgid "This level proves the first *absorption* law."
msgstr ""

#: Game.Levels.LogicLaws.logicalands
msgid "If $P,Q$ are logical statements then $P ∧ (P ∨ Q)$ is true if and only if $P$ is true."
msgstr ""

#: Game.Levels.LogicLaws.logicalands
msgid ""
msgstr ""

#: Game.Levels.LogicLaws.logicalands2
msgid "Second absorption law"
msgstr ""

#: Game.Levels.LogicLaws.logicalands2
msgid "This level proves the second absorption law."
msgstr ""

#: Game.Levels.LogicLaws.logicalands2
msgid "If $P,Q$ are logical statements then $P ∨ (P ∧ Q)$ is true if and only if $P$ is true."
msgstr ""

#: Game.Levels.LogicLaws.logicalands2
msgid ""
msgstr ""

#: Game.Levels.LogicLaws.logicalands3
msgid "Associative laws pt 1"
msgstr ""

#: Game.Levels.LogicLaws.logicalands3
msgid "This level proves that `∧` is *associative*."
msgstr ""

#: Game.Levels.LogicLaws.logicalands3
msgid "If $P,Q,R$ are logical statements, then $P ∧ (Q ∧ R)$ is true iff $(P ∧ Q) ∧ R$ is true."
msgstr ""

#: Game.Levels.LogicLaws.logicalands3
msgid ""
msgstr ""

#: Game.Levels.LogicLaws.logicalands4
msgid "Associative laws pt 2"
msgstr ""

#: Game.Levels.LogicLaws.logicalands4
msgid "This level proves that `∨` is associative."
msgstr ""

#: Game.Levels.LogicLaws.logicalands4
msgid "If $P,Q,R$ are logical statements then $P ∨ (Q ∨ R)$ is true iff $(P ∨ Q) ∨ R$ is true."
msgstr ""

#: Game.Levels.LogicLaws.logicalands4
msgid ""
msgstr ""

#: Game.Levels.LogicLaws.logicalands5
msgid "Distributive laws 1"
msgstr ""

#: Game.Levels.LogicLaws.logicalands5
msgid "This level proves the *distributivity* of `∧` over `∨`."
msgstr ""

#: Game.Levels.LogicLaws.logicalands5
msgid "If $P,Q,R$ are logical statements then $P ∧ (Q ∨ R)$ is true iff $(P ∧ Q) ∨ (P ∧ R)$ is true."
msgstr ""

#: Game.Levels.LogicLaws.logicalands5
msgid ""
msgstr ""

#: Game.Levels.LogicLaws.logicalands6
msgid "Distributive laws 2"
msgstr ""

#: Game.Levels.LogicLaws.logicalands6
msgid "This level proves the distributivity of `∨` over `∧`."
msgstr ""

#: Game.Levels.LogicLaws.logicalands6
msgid "If $P,Q,R$ are logical statements then $P ∨ (Q ∧ R)$ is true iff $(P ∨ Q) ∧ (P ∨ R)$ is true."
msgstr ""

#: Game.Levels.LogicLaws.logicalands6
msgid ""
msgstr ""

#: Game.Levels.LogicLaws
msgid "Logic Laws"
msgstr ""

#: Game.Levels.LogicLaws
msgid "Lets learn about some laws of logic."
msgstr ""

#: Game.Levels.NotLogic.notlogic
msgid "contrapositive"
msgstr ""

#: Game.Levels.NotLogic.notlogic
msgid "By definition `¬Q` is equivalent to `Q → false`. Lets call this result\n"
"\n"
"`not_iff_imp_false (P : Prop) : ¬ P ↔ (P → false)`\n"
"\n"
"\n"
"You can convince yourself this is true by writting out the truth table for `¬ P` and `P → false`.\n"
"\n"
"\n"
"In order to use it, lets look at a new tactic.\n"
"\n"
"## The `rw` tactic\n"
"\n"
"The `rw`tactic (short for `rewrite`)\n"
"is a tactic that allows you to do a substitution. For example, if we have the\n"
"assumption `h : P ↔ Q`, then `rw [h]` will replace the (first) `P` in the goal with `Q`. If instead you would like to\n"
"turn the first `Q` in your goal to `P` then use `rw [←h]`. (To get the `←` arrow, type `backslash l`).\n"
"\n"
"Combining `rw` and `not_iff_imp_false` (dont forget the []), try to prove the following:"
msgstr ""

#: Game.Levels.NotLogic.notlogic
msgid "If $P$ and $Q$ are propositions, and $P\\implies Q$, then\n"
"$\\lnot Q\\implies \\lnot P$."
msgstr ""

#: Game.Levels.NotLogic.notlogic
msgid "Start by using `rw [not_iff_imp_false]` and see what changes."
msgstr ""

#: Game.Levels.NotLogic.notlogic
msgid "Tip\n"
"If you want to use the `rw` tactic on one of your assumptions then this can be done.\n"
"\n"
"For example, if we have `h1 : P ↔ Q` and `h2` is the assumption we want to change, then\n"
" `rw [h1] at h2` will substitute the first `P` in `h2` to `Q`."
msgstr ""

#: Game.Levels.NotLogic.notlogic
msgid "# The `rw` tactic\n"
"\n"
"The `rw`tactic (short for `rewrite`)\n"
"is a tactic that allows you to do a substitution. For example, if we have the\n"
"assumption `h : P ↔ Q`, then `rw [h]` will replace the (first) `P` in the goal with `Q`. If instead you would like to\n"
"turn the first `Q` in your goal to `P` then use `rw [←h]`. (To get the `←` arrow, type `backslash l`)."
msgstr ""

#: Game.Levels.NotLogic.tf6
msgid "The `exfalso` tactic."
msgstr ""

#: Game.Levels.NotLogic.tf6
msgid "In this level we want to prove prove that `false` implies any proposition `P`."
msgstr ""

#: Game.Levels.NotLogic.tf6
msgid "If $P$ is a logical statement then $\\mathrm{false}$ implies $P$."
msgstr ""

#: Game.Levels.NotLogic.tf6
msgid "# What is going on here?\n"
"\n"
"One way to solve this level is to use `intro h` followed by `rcases h`.  Notice that using `intro h`,\n"
"introduces the assumption `h : false`. Lean thinks of `false` as empty, i.e having no elements.\n"
"`rcases h` goes through each element in `h` and tries to prove our goal.\n"
"But since our assumption is `false` there are no cases, so the result is trivially true.\n"
"To make sense of this outside of Lean, we think that starting from a false statement we can have\n"
"any outcome, both true and false (see levels 3 & 4 of True and False world).\n"
"\n"
"## The `exfalso` tactic\n"
"\n"
"A way to use this result in Lean is with the `exfalso` tactic,\n"
"which changes any goal to `false`."
msgstr ""

#: Game.Levels.NotLogic.tf6
msgid "## The `exfalso` tactic\n"
"\n"
"A way to use this result in Lean is with the <mark style =\"background-color : #ebdef0 \"> `exfalso`</mark> tactic,\n"
"which changes any goal to `false`."
msgstr ""

#: Game.Levels.NotLogic.pnotpfalse
msgid "P not P is false"
msgstr ""

#: Game.Levels.NotLogic.pnotpfalse
msgid "In this level we will prove that `P ∧ ¬ P` is always false. This is an example of a *contradiction*."
msgstr ""

#: Game.Levels.NotLogic.pnotpfalse
msgid "If $P$ is a logical statement, then $P ∧ ¬P$ is false."
msgstr ""

#: Game.Levels.NotLogic.pnotpfalse
msgid ""
msgstr ""

#: Game.Levels.NotLogic.notlogic1
msgid "Proof by contradiction."
msgstr ""

#: Game.Levels.NotLogic.notlogic1
msgid "##  Proof by contradiction.\n"
"\n"
"In this level we will see why proofs by contradiction are valid. The key is to note that for any\n"
"logical statements `P,Q`, we have that ` P ∧ (¬ P) → Q` is true.\n"
"\n"
"-/\n"
"\n"
"/-Hint : Why is this true?\n"
"We have just seen that `P ∧ (¬ P)`is always false and `false → Q` is always true.\n"
"-/"
msgstr ""

#: Game.Levels.NotLogic.notlogic1
msgid "If $P$ and $Q$ are logical statements, then\n"
"$(P\\land(\\lnot P))\\implies Q.$"
msgstr ""

#: Game.Levels.NotLogic.notlogic1
msgid "Start by introducing your assumption and then using `exfalso`."
msgstr ""

#: Game.Levels.NotLogic.notlogic1
msgid "If you want to use to use this result later on then you can type `apply (contra P Q)`where `P,Q` are\n"
"the assumptions you want to use. You can also use the tactic `by_contra`\n"
"to achieve similar results."
msgstr ""

#: Game.Levels.NotLogic.notlogic2
msgid "Proof by contradiction."
msgstr ""

#: Game.Levels.NotLogic.notlogic2
msgid "We proved earlier that `(P → Q) → (¬ Q → ¬ P)`. The converse,\n"
"that `(¬ Q → ¬ P) → (P → Q)` is certainly true, but trying to prove\n"
"it using the tactics we've learnt so far is impossible.\n"
"\n"
"# Why is this impossible?\n"
"\n"
"Suppose we tried to prove this with the tactics we have seen so far, then our proof might look\n"
"something like:\n"
"```\n"
"intro h\n"
"intro p\n"
"rw [not_iff_imp_false] at h\n"
"rw [not_iff_imp_false] at h\n"
"```\n"
"You are then left with the following state:\n"
"```\n"
"P Q : Prop\n"
"h : (Q → false) → P → false\n"
"p : P\n"
"⊢ Q\n"
"```\n"
"and now we are stuck. In fact, using tactics such as `intro` and `apply` you will never be able to\n"
"prove this lemma as this is not provable in constructive logic. The key in proving this is to use\n"
"Lean's version of a truth table!\n"
"\n"
"In order to continue we need a new tactic.\n"
"\n"
"## The `by_cases` tactic\n"
"\n"
"The tactic `by_cases` allows us to create Lean's\n"
"version of a truth table.\n"
"\n"
"For example, if you have `P Q : Prop`, then `by_cases hp : P; by_cases hq : Q,`\n"
"will create four goals, one for each of the four  possibilities for `P,Q`, i.e.,\n"
"\n"
"```md\n"
"| `P`     | `Q`     |\n"
"| --------|---------|\n"
"| `true`  | `true`  |\n"
"| `true`  | `false` |\n"
"| `false` | `true`  |\n"
"| `false` | `false` |\n"
"```\n"
"\n"
"**Note the semicolon**! It means do the next tactic to all the goals, not just the first."
msgstr ""

#: Game.Levels.NotLogic.notlogic2
msgid "If $P$ and $Q$ are logical statements, then\n"
"$(\\lnot Q\\implies \\lnot P)\\implies(P\\implies Q).$"
msgstr ""

#: Game.Levels.NotLogic.notlogic2
msgid ""
msgstr ""

#: Game.Levels.NotLogic.notlogic2
msgid "## The `by_cases` tactic\n"
"\n"
"The tactic `by_cases` allows us to create Lean's\n"
"version of a truth table.\n"
"\n"
"For example, if you have `P Q : Prop`, then `by_cases hp : P; by_cases hq : Q,`\n"
"will create four goals, one for each of the four  possibilities for `P,Q`, i.e.,\n"
"\n"
"```md\n"
"| `P`     | `Q`     |\n"
"| --------|---------|\n"
"| `true`  | `true`  |\n"
"| `true`  | `false` |\n"
"| `false` | `true`  |\n"
"| `false` | `false` |\n"
"```\n"
"\n"
"**Note the semicolon**! It means do the next tactic to all the goals, not just the first."
msgstr ""

#: Game.Levels.NotLogic.notlogiccb
msgid "more not logic"
msgstr ""

#: Game.Levels.NotLogic.notlogiccb
msgid ""
msgstr ""

#: Game.Levels.NotLogic.notlogiccb
msgid "If $P$ is a logical statement then $P \\implies ¬P$ implies $\\mathrm{false}$."
msgstr ""

#: Game.Levels.NotLogic.notlogiccb
msgid ""
msgstr ""

#: Game.Levels.NotLogic.notlogiccb2
msgid "even more not logic"
msgstr ""

#: Game.Levels.NotLogic.notlogiccb2
msgid ""
msgstr ""

#: Game.Levels.NotLogic.notlogiccb2
msgid "If $P$ is a logical statement then $P \\implies ¬ ¬P$."
msgstr ""

#: Game.Levels.NotLogic.notlogiccb2
msgid "Try using `rw [not_iff_imp_false]`."
msgstr ""

#: Game.Levels.NotLogic.notlogiccb2
msgid ""
msgstr ""

#: Game.Levels.NotLogic.notlogic3
msgid "even more not logic"
msgstr ""

#: Game.Levels.NotLogic.notlogic3
msgid ""
msgstr ""

#: Game.Levels.NotLogic.notlogic3
msgid "If $P$ is a logical statement then $¬(¬P) \\implies P$."
msgstr ""

#: Game.Levels.NotLogic.notlogic3
msgid ""
msgstr ""

#: Game.Levels.NotLogic.notlogic4
msgid "Boss Level"
msgstr ""

#: Game.Levels.NotLogic.notlogic4
msgid ""
msgstr ""

#: Game.Levels.NotLogic.notlogic4
msgid "If $P, Q$ are logical statements then $(P \\implies Q)$ is equivalent to $(¬P) ∨ Q$."
msgstr ""

#: Game.Levels.NotLogic.notlogic4
msgid ""
msgstr ""

#: Game.Levels.NotLogic
msgid "Not Logic"
msgstr ""

#: Game.Levels.NotLogic
msgid "Lets learn about not."
msgstr ""

#: Game.Levels.DeMorgan.demorgan1
msgid "De Morgan's laws, First Boss"
msgstr ""

#: Game.Levels.DeMorgan.demorgan1
msgid "It is time to tackle our final bosses, the *De Morgans laws*. Use your tactics wisely!"
msgstr ""

#: Game.Levels.DeMorgan.demorgan1
msgid "If $P,Q$ are logical statements  $¬(P ∨ Q)$ is equivalent to $¬ P ∧ ¬Q$."
msgstr ""

#: Game.Levels.DeMorgan.demorgan1
msgid "You can do this only using `constructor`, `intro`, `apply`, `left`, `right`."
msgstr ""

#: Game.Levels.DeMorgan.demorgan1
msgid "If you have a goal `¬P` then `intro h` will turn your goal into `false` and give you\n"
"an extra assumption `h : P`."
msgstr ""

#: Game.Levels.DeMorgan.demorgan1
msgid "If you have a goal `false` and an assumption `h : ¬P`, then `apply h` will turn your goal\n"
"into `P`."
msgstr ""

#: Game.Levels.DeMorgan.demorgan1
msgid ""
msgstr ""

#: Game.Levels.DeMorgan.demorgan2
msgid "De Morgan's laws, Final Boss"
msgstr ""

#: Game.Levels.DeMorgan.demorgan2
msgid "For this final battle with De Morgan, you are on your own!"
msgstr ""

#: Game.Levels.DeMorgan.demorgan2
msgid "If $P,Q$ are logical statements then $¬(P ∧ Q)$ is equivalent to $¬ P ∨ ¬Q$."
msgstr ""

#: Game.Levels.DeMorgan.demorgan2
msgid ""
msgstr ""

#: Game.Levels.DeMorgansLaws
msgid "De Morgan's Laws"
msgstr ""

#: Game.Levels.DeMorgansLaws
msgid "Lets learn about De Morgan's laws."
msgstr ""

#: Game.Levels.MoreTF.nottf2
msgid "More True and False 1"
msgstr ""

#: Game.Levels.MoreTF.nottf2
msgid ""
msgstr ""

#: Game.Levels.MoreTF.nottf2
msgid "$¬ \\mathrm{false}$ implies $\\mathrm{true}$."
msgstr ""

#: Game.Levels.MoreTF.nottf2
msgid ""
msgstr ""

#: Game.Levels.MoreTF.nottf
msgid "More True and False 2"
msgstr ""

#: Game.Levels.MoreTF.nottf
msgid ""
msgstr ""

#: Game.Levels.MoreTF.nottf
msgid "$¬ \\mathrm{true}$ implies $\\mathrm{false}$."
msgstr ""

#: Game.Levels.MoreTF.nottf
msgid ""
msgstr ""

#: Game.Levels.MoreTF.tf8
msgid "More True and False 3"
msgstr ""

#: Game.Levels.MoreTF.tf8
msgid ""
msgstr ""

#: Game.Levels.MoreTF.tf8
msgid "If $P$ is a logical statement then $P$ implies $(P \\implies \\mathrm{false}) \\implies \\mathrm{false}$"
msgstr ""

#: Game.Levels.MoreTF.tf8
msgid ""
msgstr ""

#: Game.Levels.MoreTF.tf9
msgid "More True and False 4"
msgstr ""

#: Game.Levels.MoreTF.tf9
msgid ""
msgstr ""

#: Game.Levels.MoreTF.tf9
msgid "If $P, Q$ are logical statements then $P \\implies \\mathrm{false}$ implies $P \\implies Q$."
msgstr ""

#: Game.Levels.MoreTF.tf9
msgid ""
msgstr ""

#: Game.Levels.MoreTF.tf10
msgid "More True and False 5"
msgstr ""

#: Game.Levels.MoreTF.tf10
msgid ""
msgstr ""

#: Game.Levels.MoreTF.tf10
msgid "For any logical statement $P$, $(\\mathrm{true} \\implies \\mathrm{false})$ implies $P$."
msgstr ""

#: Game.Levels.MoreTF.tf10
msgid ""
msgstr ""

#: Game.Levels.MoreTrueAndFalse
msgid "More True and False"
msgstr ""

#: Game.Levels.MoreTrueAndFalse
msgid "Lets learn about more true and false!"
msgstr ""

#: Game.Levels.Bonus.logic8
msgid "Bonus 1"
msgstr ""

#: Game.Levels.Bonus.logic8
msgid "If you're sad that the game is over, here is some bonus content to keep you going."
msgstr ""

#: Game.Levels.Bonus.logic8
msgid "A long chain of implications."
msgstr ""

#: Game.Levels.Bonus.logic9
msgid "Bonus 2"
msgstr ""

#: Game.Levels.Bonus.logic9
msgid "If you're sad that the game is over, here is some bonus content to keep you going."
msgstr ""

#: Game.Levels.Bonus.logic9
msgid "A nested chain ofimplications."
msgstr ""

#: Game.Levels.Bonus.logic10
msgid "Bonus 3"
msgstr ""

#: Game.Levels.Bonus.logic10
msgid "If you're sad that the game is over, here is some bonus content to keep you going."
msgstr ""

#: Game.Levels.Bonus.logic10
msgid "An even more nested implications"
msgstr ""

#: Game.Levels.Bonus.logic11
msgid "Bonus 4"
msgstr ""

#: Game.Levels.Bonus.logic11
msgid "If you're sad that the game is over, here is some bonus content to keep you going."
msgstr ""

#: Game.Levels.Bonus.logic11
msgid "This is getting silly now!"
msgstr ""

#: Game.Levels.Bonus.logic12
msgid "Bonus 5"
msgstr ""

#: Game.Levels.Bonus.logic12
msgid "If you're sad that the game is over, here is some bonus content to keep you going."
msgstr ""

#: Game.Levels.Bonus.logic12
msgid "Are we there yet?"
msgstr ""

#: Game.Levels.Bonus.logic13
msgid "Bonus Boss"
msgstr ""

#: Game.Levels.Bonus.logic13
msgid "If you're sad that the game is over, here is some bonus content to keep you going."
msgstr ""

#: Game.Levels.Bonus.logic13
msgid "Time for another boss fight!"
msgstr ""

#: Game.Levels.Bonus.logic14
msgid "Bonus Boss 2"
msgstr ""

#: Game.Levels.Bonus.logic14
msgid "If you're sad that the game is over, here is some bonus content to keep you going."
msgstr ""

#: Game.Levels.Bonus.logic14
msgid "Time for a super boss fight!"
msgstr ""

#: Game.Levels.Bonus
msgid "Bonus world"
msgstr ""

#: Game.Levels.Bonus
msgid "Here is some bonus content to keep you going."
msgstr ""

#: Game
msgid "Dungeons and De Morgan's: The logic Game"
msgstr ""

#: Game
msgid "## By Chris Birkbeck and Niki Kalaydzhieva\n"
"\n"
"Go on a Mathemagical quest to learn some logic!\n"
"\n"
"# What is this game?\n"
"\n"
"This is a game to teach you some mathematical logic using Lean.\n"
"\n"
"Have fun!"
msgstr ""

#: Game
msgid "# Credits\n"
"\n"
"Some levels have been shamelessly borrowed from Kevin Buzzard's and Mohammad Pedramfar's\n"
"Natural Numbers Game\n"
"as well  as Kevin Buzzard's Formalising mathematics\n"
"course at Imperial College London."
msgstr ""

#: Game
msgid "Game Template"
msgstr ""

#: Game
msgid "You should use this game as a template for your own game and add your own levels."
msgstr ""
